/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.4-322
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';


// Services

export interface FileServiceDef {
    getUploadHistory: (userId: string, callParams: CallParams<'userId'>) => string[] | Promise<string[]>;
    shareFile: (recepients: string[], cid: string, callParams: CallParams<'recepients' | 'cid'>) => void | Promise<void>;
    uploadFile: (file: { path: string; }, callParams: CallParams<'file'>) => void | Promise<void>;
}
export function registerFileService(service: FileServiceDef): void;
export function registerFileService(serviceId: string, service: FileServiceDef): void;
export function registerFileService(peer: FluencePeer, service: FileServiceDef): void;
export function registerFileService(peer: FluencePeer, serviceId: string, service: FileServiceDef): void;
       

export function registerFileService(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "file_service",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "getUploadHistory" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "userId" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    ]
                }
            },
            "shareFile" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "recepients" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "cid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "nil"
                }
            },
            "uploadFile" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "file" : {
                            "tag" : "struct",
                            "name" : "File",
                            "fields" : {
                                "path" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "nil"
                }
            }
        }
    }
}
    );
}
      
// Functions

